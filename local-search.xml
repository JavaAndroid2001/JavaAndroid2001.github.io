<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>this的使用</title>
    <link href="/2020/11/13/this%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2020/11/13/this%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="Java之this的使用"><a href="#Java之this的使用" class="headerlink" title="Java之this的使用"></a>Java之this的使用</h2><hr><p>当方法的局部变量和类的成员变量重名的时候，根据“就近原则”，优先使用局部变量。<br></br><br>如果需要访问本类当中的成员变量，需要使用格式：        &emsp;&emsp;类似两个name不知道用谁的，但是加了this程序就知道了<br></br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;    this.成员变量名<br></br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;说白了就是指向性的对应内存区的使用。<br></br>&emsp;&emsp;<br></br>&emsp;&emsp;“通过谁调用的方法，谁就是this”</p><hr><p>例：</p><pre><code class="hljs javascript">D1：<span class="hljs-built_in">String</span> name;<span class="hljs-comment">//参数name是对方的名字</span><span class="hljs-comment">//成员变量name是自己的名字</span>public <span class="hljs-keyword">void</span> <span class="hljs-function"><span class="hljs-title">sayHello</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> name</span>)</span>&#123;Systeml.out.println(name+<span class="hljs-string">&quot;,你好，我是&quot;</span>+<span class="hljs-built_in">this</span>.name);&#125;D2：Person person = <span class="hljs-keyword">new</span> Person();person.name = <span class="hljs-string">&quot;王健林&quot;</span>;person.sayHello(name:<span class="hljs-string">&quot;王思聪&quot;</span>);</code></pre><hr><p>写在后面：<br></br>&emsp;&emsp;<br>    由于最近事情比较多，要跑步，要洗衣服，要洗鞋子，要吃饭，要上课，要预习，我这并不是为自己找借口，我没找到一个时间都会不停的学习，不停的敲代码，虽然很累但是生活很充实，这破电脑又要没电了，真是醉了，但生活还得继续呀！！！！！！！！！！！！！！！！！！！！！！！！加油！！！！！！<br>    </br>&emsp;&emsp;<br>    还有就是Github的服务器是真的慢，如果有时间一定要找个树莓派来做服务器，但是网线怎么办，还得思考思考。<br>     </br>&emsp;&emsp;<br>     其实我写了很多笔记，但是更新为什么这么慢，因为我在挤牙膏呀！！！！<br>      </br>&emsp;&emsp;<br>      又到了11点，告辞！最后再弱弱说一句，我的博客好垃圾呀，没有别人的炫酷，如果有时间我一定会帮你加上几个功能！！！！！！</p><hr><p><del>我正在黑暗中摸索前行，每一盏我点亮的路灯下都有我沾满泥垢的掌印，但光亮终会散满我所幻想的世界。</del></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>面向对象的三大特征——封装</title>
    <link href="/2020/11/12/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%B8%89%E5%A4%A7%E7%89%B9%E5%BE%81%E2%80%94%E2%80%94%E5%B0%81%E8%A3%85/"/>
    <url>/2020/11/12/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%B8%89%E5%A4%A7%E7%89%B9%E5%BE%81%E2%80%94%E2%80%94%E5%B0%81%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h2 id="面向对象的三大特征：封装，继承，多态。"><a href="#面向对象的三大特征：封装，继承，多态。" class="headerlink" title="面向对象的三大特征：封装，继承，多态。"></a>面向对象的三大特征：封装，继承，多态。</h2><hr><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><pre><code>封装性：    1.方法就是一种封装性    2.关键字pribate也是一种封装性pribate：    对对象进行封装，        pribate                    适用于解决一些问题    问题描述：定义类的年龄时，无法阻止不合理的数值被设置进来。    解决方案：用prvate进行修饰，那么本类当中仍然可以随意访问了。一旦使用了provate进行修饰，那么本类当中仍然可以随意访问。但是！超出本类范围之外就不能直接访问了。</code></pre><p>封装就是将一些细节信息隐藏起来，对外界不可见。</p><p>我们来看具体项目限制</p><pre><code>        /*项目功能：1.要求使用private来定义成员变量        2.要求变量下定义时能够对变量进行可执行的判断方法操作和循环        3.使用另一个类来调用Demo01的成员变量以及成员方法解决方法：1.先用类比来对此问题进行简单的思路构图建设            （1）学生的name，age，male,height,weight            （2）用两个类来完成程序         */</code></pre><p>Demo01代码</p><pre><code class="hljs javascript">package com.lei;<span class="hljs-comment">/*</span><span class="hljs-comment">    项目功能：1.要求使用private来定义成员变量</span><span class="hljs-comment">            2.要求变量下定义时能够对变量进行可执行的判断方法操作和循环</span><span class="hljs-comment">            3.使用另一个类来调用Demo01的成员变量以及成员方法</span><span class="hljs-comment"></span><span class="hljs-comment">    解决方法：1.先用类比来对此问题进行简单的思路构图建设</span><span class="hljs-comment">                （1）学生的name，age，male,height,weight</span><span class="hljs-comment">                （2）用两个类来完成程序</span><span class="hljs-comment"> */</span>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo01</span> </span>&#123;    <span class="hljs-comment">//成员变量</span>    private <span class="hljs-built_in">String</span> name;    private int age;    private boolean male;    private double height;    private double weight;    <span class="hljs-comment">//成员方法</span>    <span class="hljs-comment">//这时候需要 方法：set***   get***</span>    <span class="hljs-comment">//布尔型比较特殊：在获取返回值的时候只能用is***</span>    public <span class="hljs-keyword">void</span> <span class="hljs-function"><span class="hljs-title">show</span>(<span class="hljs-params"></span>)</span>&#123;        System.out.println(<span class="hljs-string">&quot;姓名：&quot;</span>+name+<span class="hljs-string">&quot;   &quot;</span>+<span class="hljs-string">&quot;年龄：&quot;</span>+age+<span class="hljs-string">&quot;   &quot;</span>+<span class="hljs-string">&quot;是否为男性：&quot;</span>+male+<span class="hljs-string">&quot;身高：&quot;</span>+height+<span class="hljs-string">&quot;   &quot;</span>+<span class="hljs-string">&quot;体重：&quot;</span>+weight);    &#125;    public <span class="hljs-keyword">void</span> <span class="hljs-function"><span class="hljs-title">setName</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> nu1</span>)</span>&#123;        name = nu1;    &#125;    public <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">getName</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-keyword">return</span> name;    &#125;    public <span class="hljs-keyword">void</span> <span class="hljs-function"><span class="hljs-title">setAge</span>(<span class="hljs-params">int nu2</span>)</span>&#123;        age = nu2;    &#125;    public int <span class="hljs-function"><span class="hljs-title">getAge</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-keyword">return</span> age;    &#125;    public <span class="hljs-keyword">void</span> <span class="hljs-function"><span class="hljs-title">setMale</span>(<span class="hljs-params">boolean nu3</span>)</span>&#123;        male = nu3;    &#125;    public boolean <span class="hljs-function"><span class="hljs-title">isMale</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-keyword">return</span> male;    &#125;    public <span class="hljs-keyword">void</span> <span class="hljs-function"><span class="hljs-title">setHeight</span>(<span class="hljs-params">double nu4</span>)</span>&#123;        height = nu4;    &#125;    public double <span class="hljs-function"><span class="hljs-title">getHeight</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-keyword">return</span> height;    &#125;    public <span class="hljs-keyword">void</span> <span class="hljs-function"><span class="hljs-title">setWeight</span>(<span class="hljs-params">double nu5</span>)</span>&#123;        weight = nu5;    &#125;    public double <span class="hljs-function"><span class="hljs-title">getWeight</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-keyword">return</span> weight;    &#125;&#125;</code></pre><hr><p>Student代码：</p><pre><code class="hljs javascript">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;    public <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-function"><span class="hljs-title">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>)</span> &#123;        Demo01 student = <span class="hljs-keyword">new</span> Demo01();        student.show();    &#125;</code></pre><hr><p>今天的时间不是很多，没来得及写，代码不是很全，现在22.39，宿舍已经熄灯，我还希望有更多的时间能够学习但是时间不允许了哈哈，因为电脑撑不住电，明天还有课，但是但是，明天一定一定完善这几段代码！！！<br></br></p><hr><p><del>我正在黑暗中摸索前行，每一盏我点亮的路灯下都有我沾满泥垢的掌印，但光亮终会散满我所幻想的世界。</del></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>类与方法</title>
    <link href="/2020/11/11/%E7%B1%BB%E4%B8%8E%E6%96%B9%E6%B3%95/"/>
    <url>/2020/11/11/%E7%B1%BB%E4%B8%8E%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="类与方法"><a href="#类与方法" class="headerlink" title="类与方法"></a>类与方法</h2><hr><p>脑子不太好的我容易被混淆了呀<br></br>&emsp;&emsp;我们先来看看类的定义格式：</p><pre><code>public class ClassName&#123;    //成员变量    //成员方法    &#125;</code></pre><p></br>&emsp;&emsp;再来看看方法的定义格式：</p><pre><code>    public static void 方法名称 ( )&#123;    方法体    &#125;</code></pre><p>难道就没有感觉有那么一丢丢像嘛<br></br>不过把代码摆出来就清晰了许多<br></br>以上是我初学的问题所述<br></br>这时候我们来理解一下类和方法<br></br>&emsp;&emsp;</p><hr><h3 id="运用类比来解释类和方法"><a href="#运用类比来解释类和方法" class="headerlink" title="运用类比来解释类和方法"></a>运用类比来解释类和方法</h3><p>事物与类的对比<br></br>现实世界的一类事物：<br>    </br>&emsp;&emsp;属性：事物的状态信息。<br>    </br>&emsp;&emsp;行为：事物能够做什么。<br></br>Java中class描述事物也是如此：<br>    </br>&emsp;&emsp;成员变量：对应事物的属性<br>    </br>&emsp;&emsp;成员方法：对应事物的行为</p><p></br>&emsp;&emsp;运用类比（类比不管在生活，写代码，还是学习上，都是一个很重要的概念）的方法我们可以把类看作是“一个人类”<br></br>&emsp;&emsp;人类有属性（变量）（我的血量，我的蓝量，我的名字，我的身高，我的体重，这些都可以看作是我的属性）<br></br>&emsp;&emsp;人类的行为（方法）（我吃饭，我睡觉，我敲代码，我打游戏这些都是我的行为）</p><p></br></br></br></br>今天就先到这吧，破电脑没电了，学校的屁事还有点多<br></br>最后一定是自律自律自律！！！！加油你能行</p><hr><p><del>我正在黑暗中摸索前行，每一盏我点亮的路灯下都有我沾满泥垢的掌印，但光亮终会散满我所幻想的世界。</del></p>]]></content>
    
    
    <categories>
      
      <category>学习记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>以细行律身，不可以细行取人。</title>
    <link href="/2020/11/10/%E4%BB%A5%E7%BB%86%E8%A1%8C%E5%BE%8B%E8%BA%AB%EF%BC%8C%E4%B8%8D%E5%8F%AF%E4%BB%A5%E7%BB%86%E8%A1%8C%E5%8F%96%E4%BA%BA%E3%80%82/"/>
    <url>/2020/11/10/%E4%BB%A5%E7%BB%86%E8%A1%8C%E5%BE%8B%E8%BA%AB%EF%BC%8C%E4%B8%8D%E5%8F%AF%E4%BB%A5%E7%BB%86%E8%A1%8C%E5%8F%96%E4%BA%BA%E3%80%82/</url>
    
    <content type="html"><![CDATA[<h2 id="第一次为今天的-“混”-想一个标题"><a href="#第一次为今天的-“混”-想一个标题" class="headerlink" title="第一次为今天的 “混” 想一个标题"></a>第一次为今天的 “混” 想一个标题</h2><h5 id="那就是魏源的这首诗句：以细行律身，不可以细行取人。"><a href="#那就是魏源的这首诗句：以细行律身，不可以细行取人。" class="headerlink" title="那就是魏源的这首诗句：以细行律身，不可以细行取人。"></a>那就是魏源的这首诗句：以细行律身，不可以细行取人。</h5><hr><p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;《默觚下·治篇》清代思想家魏源</p><p>原文：以细行律身，不可以细行取人。</p><p>译文：君子要从一点一滴细微之处严格要求自己，却不会紧扣别人行为中的瑕疵不放手。<br></br><br></br></br></br></br><br></br><br>&emsp;&emsp;由于刚刚创建的博客，对于很多东西都不了解，但是一直都在学习当中，愿自己努力加油！<br></br><br></br>今天遇到了Hexo-admin的一个问题，就是在上传图片的时候在本地可以显示，但是上传到github就不能显示了，很奇怪，我也不做过多的深究了，我的七牛云还在审核当中，估计明天就能使用图床没那么麻烦了。</p><p></br>&emsp;&emsp;今天还在补数学补英语，加油呀宝贝er</p><hr><p><del>我正在黑暗中摸索前行，每一盏我点亮的路灯下都有我沾满泥垢的掌印，但光亮终会散满我所幻想的世界。</del></p>]]></content>
    
    
    
    <tags>
      
      <tag>日志</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown语法之 Text</title>
    <link href="/2020/11/09/%E5%86%99%E5%9C%A82020-11-9/"/>
    <url>/2020/11/09/%E5%86%99%E5%9C%A82020-11-9/</url>
    
    <content type="html"><![CDATA[<h1 id="Markdown语法之-Text"><a href="#Markdown语法之-Text" class="headerlink" title="Markdown语法之 Text"></a>Markdown语法之 Text</h1><hr><h2 id="Headers-标题"><a href="#Headers-标题" class="headerlink" title="Headers            //标题"></a>Headers            //标题</h2><hr><h1 id="This-is-an-tag"><a href="#This-is-an-tag" class="headerlink" title="This is an  tag"></a>This is an <h1> tag</h1><h2 id="This-is-an-tag-1"><a href="#This-is-an-tag-1" class="headerlink" title="This is an  tag"></a>This is an <h2> tag</h2><h6 id="This-is-an-tag-2"><a href="#This-is-an-tag-2" class="headerlink" title="This is an  tag"></a>This is an <h6> tag</h6><p>语法区：</p><p><img src="%5Cimages%5Cpasted-8.png" alt="upload successful"></p><hr><h2 id="Examples-示例"><a href="#Examples-示例" class="headerlink" title="Examples            //示例"></a>Examples            //示例</h2><hr><p>It’s very easy to make some words <strong>bold</strong> and other words <em>italic</em> with Markdown. You can even <a href="http://google.com/">link to Google!</a></p><p>语法区：</p><p><img src="%5Cimages%5Cpasted-9.png" alt="upload successful"></p><hr><h2 id="Emphasis-强调"><a href="#Emphasis-强调" class="headerlink" title="Emphasis            //强调"></a>Emphasis            //强调</h2><hr><p><em>This text will be italic</em><br><em>This will also be italic</em></p><p><strong>This text will be bold</strong><br><strong>This will also be bold</strong></p><p><em>You <strong>can</strong> combine them</em></p><p>语法区：</p><p><img src="%5Cimages%5Cpasted-10.png" alt="upload successful"></p><hr><h2 id="Ordered-命令"><a href="#Ordered-命令" class="headerlink" title="Ordered        //命令"></a>Ordered        //命令</h2><hr><ul><li>Item 1</li><li>Item 2<ul><li>Item 2a</li><li>Item 2b</li></ul></li></ul><p>语法区：</p><p><img src="%5Cimages%5Cpasted-12.png" alt="upload successful"></p><hr><h2 id="Images-图像"><a href="#Images-图像" class="headerlink" title="Images        //图像"></a>Images        //图像</h2><hr><p><img src="/images/logo.png" alt="GitHub Logo"><br>Format: <img src="url" alt="Alt Text"></p><p>语法区：</p><p><img src="%5Cimages%5Cpasted-11.png" alt="upload successful"></p><hr><h2 id="Links-链接"><a href="#Links-链接" class="headerlink" title="Links        //链接"></a>Links        //链接</h2><hr><p><a href="http://github.com/">http://github.com</a> - automatic!<br><a href="http://github.com/">GitHub</a></p><p>语法区：</p><p><img src="%5Cimages%5Cpasted-13.png" alt="upload successful"></p><hr><h2 id="Blockquotes-块"><a href="#Blockquotes-块" class="headerlink" title="Blockquotes    //块"></a>Blockquotes    //块</h2><hr><p>As Kanye West said:</p><blockquote><p>We’re living the future so<br>the present is our past.            </p></blockquote><p>语法区：</p><p><img src="%5Cimages%5Cpasted-14.png" alt="upload successful"></p><hr><h2 id="Inline-code-内联代码"><a href="#Inline-code-内联代码" class="headerlink" title="Inline code    //内联代码"></a>Inline code    //内联代码</h2><hr><p>I think you should use an<br><code>&lt;addr&gt;</code> element here instead.</p><p>图片区：</p><p><img src="%5Cimages%5Cpasted-4.png" alt="upload successful"></p><hr><h2 id="Github风格的高亮"><a href="#Github风格的高亮" class="headerlink" title="Github风格的高亮"></a>Github风格的高亮</h2><hr><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fancyAlert</span>(<span class="hljs-params">arg</span>) </span>&#123;  <span class="hljs-function"><span class="hljs-title">if</span>(<span class="hljs-params">arg</span>)</span> &#123;    $.facebox(&#123;<span class="hljs-attr">div</span>:<span class="hljs-string">&#x27;#foo&#x27;</span>&#125;)  &#125;&#125;</code></pre><p>语法区：</p><p><img src="%5Cimages%5Cpasted-5.png" alt="upload successful"></p><hr><h2 id="Task-Lists-任务列表"><a href="#Task-Lists-任务列表" class="headerlink" title="Task Lists    //任务列表"></a>Task Lists    //任务列表</h2><hr><ul><li><input checked="" disabled="" type="checkbox"> @mentions, #refs, <a href="">links</a>, <strong>formatting</strong>, and <del>tags</del> supported</li><li><input checked="" disabled="" type="checkbox"> list syntax required (any unordered or ordered list supported)</li><li><input checked="" disabled="" type="checkbox"> this is a complete item</li><li><input disabled="" type="checkbox"> this is an incomplete item</li></ul><p>语法区：<br><img src="%5Cimages%5Cpasted-6.png" alt="upload successful"></p><hr><h2 id="Tables-数据表"><a href="#Tables-数据表" class="headerlink" title="Tables        //数据表"></a>Tables        //数据表</h2><hr><p>You can create tables by assembling a list of words and dividing them with hyphens - (for the first row), and then separating each column with a pipe |:</p><p>您可以通过组合单词列表并用连字符分隔（对于第一行），然后用管道分隔每个列来创建表：</p><p>-</p><table><thead><tr><th>First Header</th><th>Second Header</th></tr></thead><tbody><tr><td>Content from cell 1</td><td>Content from cell 2</td></tr><tr><td>Content in the first column</td><td>Content in the second column</td></tr></tbody></table><p>语法区：</p><p><img src="%5Cimages%5Cpasted-7.png" alt="upload successful"></p><hr><p>文章引用：<a href="https://guides.github.com/features/mastering-markdown/">https://guides.github.com/features/mastering-markdown/</a></p><p><del>我正在黑暗中摸索前行，每一盏我点亮的路灯下都有我沾满泥垢的掌印，但光亮终会散满我所幻想的世界。</del></p>]]></content>
    
    
    <categories>
      
      <category>语法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown语法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java命名规范</title>
    <link href="/2020/11/09/Java%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/"/>
    <url>/2020/11/09/Java%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/</url>
    
    <content type="html"><![CDATA[<p>一、命名规范</p><p>1、 项目名全部小写</p><p>2、 包名全部小写</p><p>3、 类名首字母大写，如果类名由多个单词组成，每个单词的首字母都要大写。</p><p>如：public class MyFirstClass{}</p><p>4、 变量名、方法名首字母小写，如果名称由多个单词组成，每个单词的首字母都要大写。</p><p>如：int index=0;</p><pre><code>   public void toString()&#123;&#125;</code></pre><p>5、 常量名全部大写</p><p>如：public static final String GAME_COLOR=”RED”;</p><p>6、所有命名规则必须遵循以下规则：</p><p>1)、名称只能由字母、数字、下划线、$符号组成</p><p>2)、不能以数字开头</p><p>3)、名称不能使用JAVA中的关键字。</p><p>4)、坚决不允许出现中文及拼音命名。</p><hr><p>二、注释规范</p><p>1、   类注释</p><p>在每个类前面必须加上类注释，注释模板如下：</p><p>/**</p><ul><li><p>Copyright (C), 2006-2010, ChengDu Lovo info. Co., Ltd.</p></li><li><p>FileName: Test.java</p></li><li><p>类的详细说明</p></li></ul><p>*</p><ul><li><p>@author 类创建者姓名</p><ul><li>@Date    创建日期</li></ul></li><li><p>@version 1.00</p></li></ul><p>*/</p><p>2、   属性注释</p><p>在每个属性前面必须加上属性注释，注释模板如下：</p><p>/** 提示信息 */</p><p>private String strMsg = null;</p><p>3、   方法注释</p><p>在每个方法前面必须加上方法注释，注释模板如下：</p><p>/**</p><ul><li>类方法的详细使用说明</li></ul><p>*</p><ul><li><p>@param 参数1 参数1的使用说明</p></li><li><p>@return 返回结果的说明</p></li><li><p>@throws 异常类型.错误代码 注明从此类方法中抛出异常的说明</p></li></ul><p>*/</p><p>4、   构造方法注释</p><p>在每个构造方法前面必须加上注释，注释模板如下：</p><p>/**</p><ul><li>构造方法的详细使用说明</li></ul><p>*</p><ul><li><p>@param 参数1 参数1的使用说明</p></li><li><p>@throws 异常类型.错误代码 注明从此类方法中抛出异常的说明</p></li></ul><p>*/</p><p>5、   方法内部注释</p><p>在方法内部使用单行或者多行注释，该注释根据实际情况添加。</p><p>如：//背景颜色</p><pre><code>   Color bgColor = Color.RED</code></pre><hr><p> 文章引用：<a href="https://www.cnblogs.com/maowang1991/archive/2013/06/29/3162366.html">https://www.cnblogs.com/maowang1991/archive/2013/06/29/3162366.html</a></p><hr><p><del>我正在黑暗中摸索前行，每一盏我点亮的路灯下都有我沾满泥垢的掌印，但光亮终会散满我所幻想的世界。</del></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
